"use client";
import React, { useState, useEffect } from "react";
import { Header } from "../../components/layout/header";
import { ChevronDown } from "lucide-react";
import {
  MagnifyingGlassIcon,
  PencilSquareIcon,
  TrashIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";

const commodities = ["Gold", "Silver", "Zinc", "Copper"];
const exchanges = ["Dollar", "Euro", "Pound"];
const allItems = [...commodities, ...exchanges];

function capitalizeFirst(str: string) {
  if (!str) return "";
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

export default function DailyPricesPage() {
  // Form state
  const [itemType, setItemType] = useState("Commodity");
  const [item, setItem] = useState(commodities[0]);
  const [price, setPrice] = useState("");
  // Date and time are autogenerated by backend
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  // Table state
  const [prices, setPrices] = useState([]);
  const [pricesLoading, setPricesLoading] = useState(true);
  const [page, setPage] = useState(1);
  const pageSize = 10;
  const [filterItem, setFilterItem] = useState("");
  const [filterDate, setFilterDate] = useState("");
  const [editingPrice, setEditingPrice] = useState<any>(null);
  const [filterTrigger, setFilterTrigger] = useState(0);
  // Modal state
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingPrice, setViewingPrice] = useState<any>(null);

  useEffect(() => {
    async function fetchPrices() {
      setPricesLoading(true);
      try {
        let url = "/api/daily-prices";
        const params = [];
        if (filterItem) params.push(`item=${filterItem}`);
        if (filterDate) params.push(`date=${filterDate}`);
        if (params.length) url += `?${params.join("&")}`;
        const res = await fetch(url);
        const data = await res.json();
        setPrices(data);
      } catch {
        setPrices([]);
      } finally {
        setPricesLoading(false);
      }
    }
    fetchPrices();
  }, [success, filterTrigger]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess("");
    try {
      const payload = {
        itemType,
        item,
        price: parseFloat(price),
        // date and time are autogenerated by backend
      };
      let url = "/api/daily-prices";
      let method = "POST";
      if (editingPrice) {
        url += `/${editingPrice.id}`;
        method = "PUT";
      }
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("Failed to save price");
      setSuccess(editingPrice ? "Price updated!" : "Price added!");
      setItemType("Commodity");
      setItem(commodities[0]);
      setPrice("");
      setEditingPrice(null);
    } catch (err: any) {
      setError(err.message || "Error saving price");
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (priceObj: any) => {
    setEditingPrice(priceObj);
    setItemType(priceObj.itemType);
    setItem(priceObj.item);
    setPrice(priceObj.price.toString());
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("Delete this price entry?")) return;
    setLoading(true);
    setError("");
    setSuccess("");
    try {
      const res = await fetch(`/api/daily-prices/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("Failed to delete price");
      setSuccess("Price deleted!");
    } catch (err: any) {
      setError(err.message || "Error deleting price");
    } finally {
      setLoading(false);
    }
  };

  const handleView = (priceObj: any) => {
    setViewingPrice(priceObj);
    setViewModalOpen(true);
  };
  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingPrice(null);
  };

  return (
    <>
      <Header title="Daily Price Setup" />
      <div className="px-4 sm:px-6 lg:px-8 py-8">
        <div className="max-w-xl mx-auto mt-8">
          <form onSubmit={handleSubmit}>
            <div className="shadow sm:rounded-md sm:overflow-hidden">
              <div className="px-4 py-5 bg-white space-y-6 sm:p-6">
                {error && (
                  <div className="rounded-md bg-red-50 p-4 mb-6">
                    <div className="flex">
                      <svg
                        className="h-5 w-5 text-red-400"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                        />
                      </svg>
                      <div className="ml-3">
                        <h3 className="text-sm font-medium text-red-800">
                          Error
                        </h3>
                        <div className="mt-2 text-sm text-red-700 whitespace-pre-wrap">
                          {error}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                <div className="grid grid-cols-1 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Type
                    </label>
                    <div className="relative">
                      <select
                        value={itemType}
                        onChange={(e) => {
                          setItemType(e.target.value);
                          setItem(
                            e.target.value === "Commodity"
                              ? commodities[0]
                              : exchanges[0]
                          );
                        }}
                        className="mt-1 block w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 pr-10"
                      >
                        <option value="Commodity">Commodity</option>
                        <option value="Exchange">Exchange</option>
                      </select>
                      <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      {itemType}
                    </label>
                    <div className="relative">
                      <select
                        value={item}
                        onChange={(e) => setItem(e.target.value)}
                        className="mt-1 block w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 pr-10"
                      >
                        {(itemType === "Commodity"
                          ? commodities
                          : exchanges
                        ).map((opt) => (
                          <option key={opt} value={opt}>
                            {capitalizeFirst(opt)}
                          </option>
                        ))}
                      </select>
                      <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Price
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      value={price}
                      onChange={(e) => setPrice(e.target.value)}
                      className="mt-1 block w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  {/* Date and Time fields removed, now autogenerated by backend */}
                </div>
                <div className="mt-6 flex justify-end">
                  <button
                    type="submit"
                    className="bg-blue-600 text-white px-6 py-2 rounded-md shadow hover:bg-blue-700 transition"
                    disabled={loading}
                  >
                    {editingPrice ? "Update Price" : "Add Price"}
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
        <div className="mt-10">
          <h3 className="text-lg font-semibold mb-4">All Prices</h3>
          <div className="flex items-center gap-4 mb-4">
            <div className="relative w-48">
              <select
                value={filterItem}
                onChange={(e) => {
                  setFilterItem(e.target.value);
                  setPage(1);
                }}
                className="block w-full appearance-none rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 pr-10"
              >
                <option value="">All Items</option>
                {allItems.map((opt) => (
                  <option key={opt} value={opt}>
                    {capitalizeFirst(opt)}
                  </option>
                ))}
              </select>
              <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </span>
            </div>
            <input
              type="date"
              value={filterDate}
              onChange={(e) => {
                setFilterDate(e.target.value);
                setPage(1);
              }}
              className="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 px-3 py-2 w-32"
              style={{ minWidth: "auto", maxWidth: "8rem" }}
            />
            <button
              className="bg-blue-500 text-white px-4 py-1 rounded flex items-center gap-2"
              onClick={() => setFilterTrigger(filterTrigger + 1)}
            >
              <MagnifyingGlassIcon className="h-4 w-4" />
              Search
            </button>
          </div>
          {pricesLoading ? (
            <div className="flex justify-center items-center py-10">
              <ArrowPathIcon className="h-8 w-8 text-gray-400 animate-spin" />
              <span className="ml-2 text-gray-500">Loading prices...</span>
            </div>
          ) : (
            <>
              <table className="w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Type
                    </th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Item
                    </th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Price
                    </th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Date
                    </th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Time
                    </th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {prices
                    .slice((page - 1) * pageSize, page * pageSize)
                    .map((priceObj: any) => (
                      <tr key={priceObj.id} className="hover:bg-gray-50">
                        <td className="px-4 py-2 text-gray-900">
                          {priceObj.itemType}
                        </td>
                        <td className="px-4 py-2 text-gray-700">
                          {capitalizeFirst(priceObj.item)}
                        </td>
                        <td className="px-4 py-2 text-gray-700">
                          {priceObj.price}
                        </td>
                        <td className="px-4 py-2 text-gray-700">
                          {priceObj.date}
                        </td>
                        <td className="px-4 py-2 text-gray-700">
                          {priceObj.time}
                        </td>
                        <td className="px-4 py-2 flex gap-2">
                          <button
                            className="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-xs flex items-center"
                            onClick={() => handleView(priceObj)}
                          >
                            <MagnifyingGlassIcon className="h-4 w-4 mr-1" />{" "}
                            View
                          </button>
                          <button
                            className="px-2 py-1 bg-yellow-400 text-white rounded hover:bg-yellow-500 text-xs flex items-center"
                            onClick={() => handleEdit(priceObj)}
                          >
                            <PencilSquareIcon className="h-4 w-4 mr-1" /> Edit
                          </button>
                          <button
                            className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-xs flex items-center"
                            onClick={() => handleDelete(priceObj.id)}
                          >
                            <TrashIcon className="h-4 w-4 mr-1" /> Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                </tbody>
              </table>
              <div className="flex justify-between items-center mt-4">
                <span className="text-sm text-gray-600">
                  Page {page} of{" "}
                  {Math.max(1, Math.ceil(prices.length / pageSize))}
                </span>
                <div className="flex gap-2">
                  <button
                    className="px-3 py-1 rounded bg-gray-200 text-gray-700 disabled:opacity-50"
                    disabled={page === 1}
                    onClick={() => setPage(page - 1)}
                  >
                    Previous
                  </button>
                  <button
                    className="px-3 py-1 rounded bg-gray-200 text-gray-700 disabled:opacity-50"
                    disabled={page >= Math.ceil(prices.length / pageSize)}
                    onClick={() => setPage(page + 1)}
                  >
                    Next
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
        {/* Modal for viewing price details */}
        {viewModalOpen && viewingPrice && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative">
              <button
                className="absolute top-2 right-2 flex items-center justify-center w-8 h-8 bg-red-500 hover:bg-red-600 text-white rounded-full focus:outline-none focus:ring-2 focus:ring-red-400"
                onClick={closeViewModal}
                aria-label="Close"
              >
                <span className="text-xl">&times;</span>
              </button>
              <h2 className="text-lg font-bold mb-4">Price Details</h2>
              <div className="space-y-2">
                <div>
                  <span className="font-semibold">Type:</span>{" "}
                  {viewingPrice.itemType}
                </div>
                <div>
                  <span className="font-semibold">Item:</span>{" "}
                  {capitalizeFirst(viewingPrice.item)}
                </div>
                <div>
                  <span className="font-semibold">Price:</span>{" "}
                  {viewingPrice.price}
                </div>
                <div>
                  <span className="font-semibold">Date:</span>{" "}
                  {viewingPrice.date}
                </div>
                <div>
                  <span className="font-semibold">Time:</span>{" "}
                  {viewingPrice.time}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
