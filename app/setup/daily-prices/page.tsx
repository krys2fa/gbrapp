"use client";
import React, { useState, useEffect } from "react";
import { Header } from "../../components/layout/header";
import { ChevronDown } from "lucide-react";
import { DollarSign } from "lucide-react";
import BackLink from "@/app/components/ui/BackLink";
import { formatExchangeRate } from "@/app/lib/utils";
import {
  MagnifyingGlassIcon,
  PencilSquareIcon,
  TrashIcon,
  ArrowPathIcon,
  ArrowLeftIcon,
} from "@heroicons/react/24/outline";

// allItems is derived from fetched commodities and exchanges later

function capitalizeFirst(str: string) {
  if (!str) return "";
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

export default function DailyPricesPage() {
  const [newExchangeSymbol, setNewExchangeSymbol] = useState("");
  // Add exchange form state
  const [newExchange, setNewExchange] = useState("");
  const [addExchangeLoading, setAddExchangeLoading] = useState(false);
  const [addExchangeError, setAddExchangeError] = useState("");
  const [addExchangeSuccess, setAddExchangeSuccess] = useState("");

  // Commodity creation moved to /setup/commodities

  const handleAddExchange = async (e: React.FormEvent) => {
    e.preventDefault();
    setAddExchangeLoading(true);
    setAddExchangeError("");
    setAddExchangeSuccess("");
    try {
      const res = await fetch("/api/exchange", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: newExchange, symbol: newExchangeSymbol }),
      });
      if (!res.ok) throw new Error("Failed to add exchange");
      setAddExchangeSuccess("Exchange added!");
      setNewExchange("");
      setNewExchangeSymbol("");
      // Refresh exchanges list
      const exRes = await fetch("/api/exchange");
      const exData = await exRes.json();
      setExchanges(exData);
      setExchangeId(exData[0]?.id || "");
    } catch (err: any) {
      setAddExchangeError(err.message || "Error adding exchange");
    } finally {
      setAddExchangeLoading(false);
    }
  };
  // Form state
  // Commodity form state
  const [commodities, setCommodities] = useState<any[]>([]);
  const [commodityId, setCommodityId] = useState("");
  const [commodityPrice, setCommodityPrice] = useState("");
  // Exchange form state
  const [exchanges, setExchanges] = useState<any[]>([]);
  const [exchangeId, setExchangeId] = useState("");
  const [exchangeRate, setExchangeRate] = useState("");
  // Date and time are autogenerated by backend
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  // Table state
  const [prices, setPrices] = useState([]);
  const [pricesLoading, setPricesLoading] = useState(true);
  const [page, setPage] = useState(1);
  const pageSize = 10;
  const [filterItem, setFilterItem] = useState("");
  const [filterDate, setFilterDate] = useState("");
  const [editingPrice, setEditingPrice] = useState<any>(null);
  const [filterTrigger, setFilterTrigger] = useState(0);
  // Modal state
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewingPrice, setViewingPrice] = useState<any>(null);

  useEffect(() => {
    async function fetchAll() {
      setPricesLoading(true);
      try {
        // Fetch commodities
        const comRes = await fetch("/api/commodity");
        const comData = await comRes.json();
        setCommodities(comData);
        setCommodityId(comData[0]?.id || "");
        // Fetch exchanges
        const exRes = await fetch("/api/exchange");
        const exData = await exRes.json();
        setExchanges(exData);
        setExchangeId(exData[0]?.id || "");
        // Fetch prices
        let url = "/api/daily-prices";
        const params: string[] = [];
        // Optionally add filters here
        if (params.length) url += `?${params.join("&")}`;
        const res = await fetch(url);
        const data = await res.json();
        setPrices(data);
      } catch {
        setPrices([]);
      } finally {
        setPricesLoading(false);
      }
    }
    fetchAll();
  }, [success, filterTrigger]);

  const handleCommoditySubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess("");
    try {
      const payload = {
        type: "COMMODITY",
        itemId: commodityId,
        price: parseFloat(commodityPrice),
      };
      let url = "/api/daily-prices";
      let method = "POST";
      if (editingPrice && editingPrice.type === "COMMODITY") {
        url += `/${editingPrice.id}`;
        method = "PUT";
      }
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("Failed to save price");
      setSuccess(editingPrice ? "Price updated!" : "Price added!");
      setCommodityId(commodities[0]?.id || "");
      setCommodityPrice("");
      setEditingPrice(null);
    } catch (err: any) {
      setError(err.message || "Error saving price");
    } finally {
      setLoading(false);
    }
  };

  const handleExchangeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess("");
    try {
      const payload = {
        type: "EXCHANGE",
        itemId: exchangeId,
        price: parseFloat(exchangeRate),
      };
      let url = "/api/daily-prices";
      let method = "POST";
      if (editingPrice && editingPrice.type === "EXCHANGE") {
        url += `/${editingPrice.id}`;
        method = "PUT";
      }
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("Failed to save rate");
      setSuccess(editingPrice ? "Rate updated!" : "Rate added!");
      setExchangeId(exchanges[0]?.id || "");
      setExchangeRate("");
      setEditingPrice(null);
    } catch (err: any) {
      setError(err.message || "Error saving rate");
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (priceObj: any) => {
    setEditingPrice(priceObj);
    // Cleaned up legacy code: no longer needed
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("Delete this price entry?")) return;
    setLoading(true);
    setError("");
    setSuccess("");
    try {
      const res = await fetch(`/api/daily-prices/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("Failed to delete price");
      setSuccess("Price deleted!");
    } catch (err: any) {
      setError(err.message || "Error deleting price");
    } finally {
      setLoading(false);
    }
  };

  const handleView = (priceObj: any) => {
    setViewingPrice(priceObj);
    setViewModalOpen(true);
  };
  const closeViewModal = () => {
    setViewModalOpen(false);
    setViewingPrice(null);
  };

  // Only show commodity-type entries in the main "All Prices" table
  const commodityPrices = (prices || []).filter(
    (p: any) => p.type === "COMMODITY"
  );

  return (
    <>
      <Header
        title="Daily Commodity Prices"
        icon={<DollarSign className="h-5 w-5" />}
        subtitle="Record and view daily commodity prices."
      />
      <div className="max-w-5xl py-8 px-4">
        <div className="mb-6" style={{ width: "100%" }}>
          <div
            className="flex"
            style={{ justifyContent: "flex-start", width: "100%" }}
          >
            <BackLink href="/setup" label="Back to Settings" />
          </div>
        </div>

        <div className="px-4 sm:px-6 lg:px-6 py-6">
          <div className="max-w-5xl mx-auto grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-8">
            <form
              onSubmit={handleCommoditySubmit}
              className="bg-white shadow sm:rounded-md sm:overflow-hidden p-6"
            >
              <h2 className="text-lg font-semibold mb-4">
                Add Commodity Price
              </h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Commodity
                  </label>
                  <div className="relative">
                    <select
                      value={commodityId}
                      onChange={(e) => setCommodityId(e.target.value)}
                      className="mt-1 block w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 pr-10"
                    >
                      {commodities.map((opt) => (
                        <option key={opt.id} value={opt.id}>
                          {capitalizeFirst(opt.name)}
                        </option>
                      ))}
                    </select>
                    <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Price
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={commodityPrice}
                    onChange={(e) => setCommodityPrice(e.target.value)}
                    className="mt-1 block w-full border px-3 py-2 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                    required
                  />
                </div>
                <div className="mt-6 flex justify-end">
                  <button
                    type="submit"
                    disabled={loading}
                    className="bg-blue-600 text-white px-6 py-2 rounded-md shadow hover:bg-blue-700 transition"
                  >
                    {editingPrice ? "Update Price" : "Add Price"}
                  </button>
                </div>
                {success && (
                  <p className="text-green-600 text-sm mt-2">{success}</p>
                )}
                {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
              </div>
            </form>

            {/* Recent Prices (last 3) */}
            <div className="bg-white shadow sm:rounded-md sm:overflow-hidden p-6">
              <h2 className="text-lg font-semibold mb-4">Recent Prices</h2>
              {prices.length === 0 ? (
                <p className="text-sm text-gray-500">No recent prices.</p>
              ) : (
                <ul className="space-y-3">
                  {prices
                    .slice()
                    .sort(
                      (a: any, b: any) =>
                        new Date(b.createdAt).getTime() -
                        new Date(a.createdAt).getTime()
                    )
                    .slice(0, 3)
                    .map((r: any) => {
                      const isCommodity = r.type === "COMMODITY";
                      const name = isCommodity
                        ? r.commodity?.name
                        : r.exchange?.name;
                      const symbol = isCommodity
                        ? r.commodity?.symbol
                        : r.exchange?.symbol;
                      return (
                        <li
                          key={r.id}
                          className="flex items-center justify-between"
                        >
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {name}{" "}
                              <span className="text-xs text-gray-500">
                                ({symbol})
                              </span>
                            </div>
                            <div className="text-sm text-gray-600">
                              {r.createdAt
                                ? `${new Date(
                                    r.createdAt
                                  ).toLocaleDateString()} ${new Date(
                                    r.createdAt
                                  ).toLocaleTimeString()}`
                                : "-"}
                            </div>
                          </div>
                          <div className="text-sm font-semibold text-gray-900">
                            {r.type === "EXCHANGE"
                              ? formatExchangeRate(r.price)
                              : r.price}
                          </div>
                        </li>
                      );
                    })}
                </ul>
              )}
            </div>
          </div>
        </div>
        <div className="mt-10">
          <h3 className="text-lg font-semibold mb-4">All Prices</h3>
          <div className="flex items-center gap-4 mb-4">
            <div className="relative w-48">
              <select
                value={filterItem}
                onChange={(e) => {
                  setFilterItem(e.target.value);
                  setPage(1);
                }}
                className="block w-full appearance-none rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 pr-10"
              >
                <option value="">All Items</option>
                {/* derive options from loaded commodities and exchanges */}
                {commodities.map((c) => (
                  <option key={c.id} value={c.name}>
                    {capitalizeFirst(c.name)}
                  </option>
                ))}
                {exchanges.map((e) => (
                  <option key={e.id} value={e.name}>
                    {capitalizeFirst(e.name)}
                  </option>
                ))}
              </select>
              <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </span>
            </div>
            <input
              type="date"
              value={filterDate}
              onChange={(e) => {
                setFilterDate(e.target.value);
                setPage(1);
              }}
              className="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 px-3 py-2 w-32"
              style={{ minWidth: "auto", maxWidth: "8rem" }}
            />
            <button
              className="bg-blue-500 text-white px-4 py-1 rounded flex items-center gap-2"
              onClick={() => setFilterTrigger(filterTrigger + 1)}
            >
              <MagnifyingGlassIcon className="h-4 w-4" />
              Search
            </button>
          </div>
          {pricesLoading ? (
            <div className="flex justify-center items-center py-10">
              <ArrowPathIcon className="h-8 w-8 text-gray-400 animate-spin" />
              <span className="ml-2 text-gray-500">Loading prices...</span>
            </div>
          ) : (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead>
                    <tr>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Name
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Symbol
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Price
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Date
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Time
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {commodityPrices
                      .slice((page - 1) * pageSize, page * pageSize)
                      .map((priceObj: any) => {
                        const isCommodity = priceObj.type === "COMMODITY";
                        const name = isCommodity
                          ? priceObj.commodity?.name
                          : priceObj.exchange?.name;
                        const symbol = isCommodity
                          ? priceObj.commodity?.symbol
                          : priceObj.exchange?.symbol;
                        return (
                          <tr key={priceObj.id} className="hover:bg-gray-50">
                            <td className="px-4 py-2 text-gray-700">{name}</td>
                            <td className="px-4 py-2 text-gray-700">
                              {symbol}
                            </td>
                            <td className="px-4 py-2 text-gray-700">
                              {priceObj.type === "EXCHANGE"
                                ? formatExchangeRate(priceObj.price)
                                : priceObj.price}
                            </td>
                            <td className="px-4 py-2 text-gray-700">
                              {new Date(
                                priceObj.createdAt
                              ).toLocaleDateString()}
                            </td>
                            <td className="px-4 py-2 text-gray-700">
                              {priceObj.createdAt
                                ? new Date(
                                    priceObj.createdAt
                                  ).toLocaleTimeString()
                                : "-"}
                            </td>
                            <td className="px-4 py-2 flex gap-2">
                              <button
                                className="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-xs flex items-center"
                                onClick={() => handleView(priceObj)}
                              >
                                <MagnifyingGlassIcon className="h-4 w-4 mr-1" />{" "}
                                View
                              </button>
                              <button
                                className="px-2 py-1 bg-yellow-400 text-white rounded hover:bg-yellow-500 text-xs flex items-center"
                                onClick={() => handleEdit(priceObj)}
                              >
                                <PencilSquareIcon className="h-4 w-4 mr-1" />{" "}
                                Edit
                              </button>
                              <button
                                className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-xs flex items-center"
                                onClick={() => handleDelete(priceObj.id)}
                              >
                                <TrashIcon className="h-4 w-4 mr-1" /> Delete
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              </div>
              <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700">
                      Showing{" "}
                      <span className="font-medium">
                        {(page - 1) * pageSize + 1}
                      </span>{" "}
                      to{" "}
                      <span className="font-medium">
                        {Math.min(page * pageSize, commodityPrices.length)}
                      </span>{" "}
                      of{" "}
                      <span className="font-medium">
                        {commodityPrices.length}
                      </span>{" "}
                      results
                    </p>
                  </div>
                  <div>
                    <nav
                      className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                      aria-label="Pagination"
                    >
                      <button
                        onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
                        disabled={page === 1}
                        className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                          page === 1
                            ? "text-gray-300 cursor-not-allowed"
                            : "text-gray-500 hover:bg-gray-50"
                        }`}
                      >
                        Previous
                      </button>
                      {Array.from(
                        {
                          length: Math.max(
                            1,
                            Math.ceil(commodityPrices.length / pageSize)
                          ),
                        },
                        (_, i) => i + 1
                      ).map((p) => (
                        <button
                          key={p}
                          onClick={() => setPage(p)}
                          className={`relative inline-flex items-center px-4 py-2 border ${
                            page === p
                              ? "z-10 bg-indigo-50 border-indigo-500 text-indigo-600"
                              : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50"
                          } text-sm font-medium`}
                        >
                          {p}
                        </button>
                      ))}
                      <button
                        onClick={() =>
                          setPage((prev) =>
                            Math.min(
                              prev + 1,
                              Math.max(
                                1,
                                Math.ceil(commodityPrices.length / pageSize)
                              )
                            )
                          )
                        }
                        disabled={
                          page ===
                          Math.max(
                            1,
                            Math.ceil(commodityPrices.length / pageSize)
                          )
                        }
                        className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                          page ===
                          Math.max(
                            1,
                            Math.ceil(commodityPrices.length / pageSize)
                          )
                            ? "text-gray-300 cursor-not-allowed"
                            : "text-gray-500 hover:bg-gray-50"
                        }`}
                      >
                        Next
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
        {/* Modal for viewing price details */}
        {viewModalOpen && viewingPrice && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative">
              <button
                className="absolute top-2 right-2 flex items-center justify-center w-8 h-8 bg-red-500 hover:bg-red-600 text-white rounded-full focus:outline-none focus:ring-2 focus:ring-red-400"
                onClick={closeViewModal}
                aria-label="Close"
              >
                <span className="text-xl">&times;</span>
              </button>
              <h2 className="text-lg font-bold mb-4">Price Details</h2>
              <div className="space-y-2">
                {(() => {
                  const isCommodity = viewingPrice.type === "COMMODITY";
                  const name = isCommodity
                    ? viewingPrice.commodity?.name
                    : viewingPrice.exchange?.name;
                  const symbol = isCommodity
                    ? viewingPrice.commodity?.symbol
                    : viewingPrice.exchange?.symbol;
                  const price =
                    viewingPrice.type === "EXCHANGE"
                      ? formatExchangeRate(viewingPrice.price)
                      : viewingPrice.price ?? "-";
                  const date = viewingPrice.createdAt
                    ? new Date(viewingPrice.createdAt).toLocaleDateString()
                    : "-";
                  const time = viewingPrice.createdAt
                    ? new Date(viewingPrice.createdAt).toLocaleTimeString()
                    : "-";

                  return (
                    <>
                      <div>
                        <span className="font-semibold">Name:</span>{" "}
                        <span>{name ? capitalizeFirst(name) : "-"}</span>
                      </div>
                      <div>
                        <span className="font-semibold">Symbol:</span>{" "}
                        <span>{symbol ?? "-"}</span>
                      </div>
                      <div>
                        <span className="font-semibold">Price:</span>{" "}
                        <span>{price}</span>
                      </div>
                      <div>
                        <span className="font-semibold">Date:</span>{" "}
                        <span>{date}</span>
                      </div>
                      <div>
                        <span className="font-semibold">Time:</span>{" "}
                        <span>{time}</span>
                      </div>
                    </>
                  );
                })()}
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
